/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class FilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://127.0.0.1:8999";
    }

    getAll(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Files";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }

    post(value: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Files";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    get(id: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Files/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    put(id: number, value: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Files/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Files/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class InboxClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://127.0.0.1:8999";
    }

    getInboxList(skip: number | undefined, take: number | undefined, title: string | null | undefined, department: string | null | undefined, archNo: string | null | undefined, archType: string | null | undefined, onlyShowNotAssigneed: boolean | null | undefined, startCreateDateTime: Date | null | undefined, endDateTime: Date | null | undefined): Promise<InboxListViewModel> {
        let url_ = this.baseUrl + "/api/Inbox?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (title !== undefined && title !== null)
            url_ += "title=" + encodeURIComponent("" + title) + "&";
        if (department !== undefined && department !== null)
            url_ += "department=" + encodeURIComponent("" + department) + "&";
        if (archNo !== undefined && archNo !== null)
            url_ += "archNo=" + encodeURIComponent("" + archNo) + "&";
        if (archType !== undefined && archType !== null)
            url_ += "archType=" + encodeURIComponent("" + archType) + "&";
        if (onlyShowNotAssigneed !== undefined && onlyShowNotAssigneed !== null)
            url_ += "onlyShowNotAssigneed=" + encodeURIComponent("" + onlyShowNotAssigneed) + "&";
        if (startCreateDateTime !== undefined && startCreateDateTime !== null)
            url_ += "startCreateDateTime=" + encodeURIComponent(startCreateDateTime ? "" + startCreateDateTime.toJSON() : "") + "&";
        if (endDateTime !== undefined && endDateTime !== null)
            url_ += "endDateTime=" + encodeURIComponent(endDateTime ? "" + endDateTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInboxList(_response);
        });
    }

    protected processGetInboxList(response: Response): Promise<InboxListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InboxListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InboxListViewModel>(<any>null);
    }

    getUnAssigneeCount(): Promise<number> {
        let url_ = this.baseUrl + "/api/Inbox/UnAssigneeCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUnAssigneeCount(_response);
        });
    }

    protected processGetUnAssigneeCount(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getInboxDetail(id: string | null): Promise<InboxDetailViewModel> {
        let url_ = this.baseUrl + "/api/Inbox/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInboxDetail(_response);
        });
    }

    protected processGetInboxDetail(response: Response): Promise<InboxDetailViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InboxDetailViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InboxDetailViewModel>(<any>null);
    }

    inboxAssignee(model: InboxAssigneeViewModel): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Inbox/assignee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInboxAssignee(_response);
        });
    }

    protected processInboxAssignee(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    inboxFeedback(model: FeedbackViewModel): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Inbox/feedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInboxFeedback(_response);
        });
    }

    protected processInboxFeedback(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class OutboxsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://127.0.0.1:8999";
    }

    post(recvUnits: string | null | undefined, userName: string | null | undefined, userDepartment: string | null | undefined, userPhoneNumber: string | null | undefined, title: string | null | undefined, businessKey: string | null | undefined, fh: number | undefined, mj: number | undefined, jjcd: number | undefined, archNo: string | null | undefined, leaderName: string | null | undefined, cwrq: string | null | undefined, fksjyq: Date | undefined, formFiles: FileParameter[] | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Outboxs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (recvUnits !== null && recvUnits !== undefined)
            content_.append("RecvUnits", recvUnits.toString());
        if (userName !== null && userName !== undefined)
            content_.append("UserName", userName.toString());
        if (userDepartment !== null && userDepartment !== undefined)
            content_.append("UserDepartment", userDepartment.toString());
        if (userPhoneNumber !== null && userPhoneNumber !== undefined)
            content_.append("UserPhoneNumber", userPhoneNumber.toString());
        if (title !== null && title !== undefined)
            content_.append("Title", title.toString());
        if (businessKey !== null && businessKey !== undefined)
            content_.append("BusinessKey", businessKey.toString());
        if (fh === null || fh === undefined)
            throw new Error("The parameter 'fh' cannot be null.");
        else
            content_.append("fh", fh.toString());
        if (mj === null || mj === undefined)
            throw new Error("The parameter 'mj' cannot be null.");
        else
            content_.append("mj", mj.toString());
        if (jjcd === null || jjcd === undefined)
            throw new Error("The parameter 'jjcd' cannot be null.");
        else
            content_.append("jjcd", jjcd.toString());
        if (archNo !== null && archNo !== undefined)
            content_.append("archNo", archNo.toString());
        if (leaderName !== null && leaderName !== undefined)
            content_.append("leaderName", leaderName.toString());
        if (cwrq !== null && cwrq !== undefined)
            content_.append("cwrq", cwrq.toString());
        if (fksjyq === null || fksjyq === undefined)
            throw new Error("The parameter 'fksjyq' cannot be null.");
        else
            content_.append("fksjyq", fksjyq.toJSON());
        if (formFiles !== null && formFiles !== undefined)
            formFiles.forEach(item_ => content_.append("formFiles", item_.data, item_.fileName ? item_.fileName : "formFiles") );

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    postSWHZ(externalSystemBusinessKey: string | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Outboxs/swhz";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (externalSystemBusinessKey !== null && externalSystemBusinessKey !== undefined)
            content_.append("ExternalSystemBusinessKey", externalSystemBusinessKey.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostSWHZ(_response);
        });
    }

    protected processPostSWHZ(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ReceivingUnitsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://127.0.0.1:8999";
    }

    getAll(): Promise<ReceivingUnit[]> {
        let url_ = this.baseUrl + "/api/ReceivingUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ReceivingUnit[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReceivingUnit.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReceivingUnit[]>(<any>null);
    }

    post(value: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ReceivingUnits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    get(id: number): Promise<string> {
        let url_ = this.baseUrl + "/api/ReceivingUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    put(id: number, value: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ReceivingUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/ReceivingUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ListValueOfInboxViewModel implements IListValueOfInboxViewModel {
    value?: InboxViewModel[] | undefined;

    constructor(data?: IListValueOfInboxViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(InboxViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListValueOfInboxViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ListValueOfInboxViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListValueOfInboxViewModel {
    value?: InboxViewModel[] | undefined;
}

export class InboxListViewModel extends ListValueOfInboxViewModel implements IInboxListViewModel {
    total?: number;

    constructor(data?: IInboxListViewModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): InboxListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InboxListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        super.toJSON(data);
        return data; 
    }
}

export interface IInboxListViewModel extends IListValueOfInboxViewModel {
    total?: number;
}

export class Inbox implements IInbox {
    id?: string | undefined;
    businessKey?: string | undefined;
    businessType?: string | undefined;
    title?: string | undefined;
    referenceNumber?: string | undefined;
    fromUnitLongId?: string | undefined;
    fromUnitShortId?: string | undefined;
    fromUnitName?: string | undefined;
    createDateTime?: Date | undefined;
    maxEndDateTime?: Date | undefined;
    emergencyLevel?: string | undefined;
    archType?: string | undefined;
    leaderDisplayName?: string | undefined;
    assigneeDateTime?: Date | undefined;
    assigneePerson?: string | undefined;
    assigneeDepartment?: string | undefined;
    assigneePhoneNumber?: string | undefined;
    withdrawalDateTime?: Date | undefined;
    withdrawalPerson?: string | undefined;
    withdrawalPhoneNumber?: string | undefined;
    withdrawalOpinion?: string | undefined;
    cancelDateTime?: Date | undefined;
    cancelPerson?: string | undefined;
    cancelPhoneNumber?: string | undefined;
    cancelOpinion?: string | undefined;
    feedbackDateTime?: Date | undefined;
    feedbackUserDisplayName?: string | undefined;
    feedbackPhoneNumber?: string | undefined;
    feedbackOpinion?: string | undefined;
    feedbaclMode?: string | undefined;
    needFeedbackType?: string | undefined;

    constructor(data?: IInbox) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.businessKey = _data["businessKey"];
            this.businessType = _data["businessType"];
            this.title = _data["title"];
            this.referenceNumber = _data["referenceNumber"];
            this.fromUnitLongId = _data["fromUnitLongId"];
            this.fromUnitShortId = _data["fromUnitShortId"];
            this.fromUnitName = _data["fromUnitName"];
            this.createDateTime = _data["createDateTime"] ? new Date(_data["createDateTime"].toString()) : <any>undefined;
            this.maxEndDateTime = _data["maxEndDateTime"] ? new Date(_data["maxEndDateTime"].toString()) : <any>undefined;
            this.emergencyLevel = _data["emergencyLevel"];
            this.archType = _data["archType"];
            this.leaderDisplayName = _data["leaderDisplayName"];
            this.assigneeDateTime = _data["assigneeDateTime"] ? new Date(_data["assigneeDateTime"].toString()) : <any>undefined;
            this.assigneePerson = _data["assigneePerson"];
            this.assigneeDepartment = _data["assigneeDepartment"];
            this.assigneePhoneNumber = _data["assigneePhoneNumber"];
            this.withdrawalDateTime = _data["withdrawalDateTime"] ? new Date(_data["withdrawalDateTime"].toString()) : <any>undefined;
            this.withdrawalPerson = _data["withdrawalPerson"];
            this.withdrawalPhoneNumber = _data["withdrawalPhoneNumber"];
            this.withdrawalOpinion = _data["withdrawalOpinion"];
            this.cancelDateTime = _data["cancelDateTime"] ? new Date(_data["cancelDateTime"].toString()) : <any>undefined;
            this.cancelPerson = _data["cancelPerson"];
            this.cancelPhoneNumber = _data["cancelPhoneNumber"];
            this.cancelOpinion = _data["cancelOpinion"];
            this.feedbackDateTime = _data["feedbackDateTime"] ? new Date(_data["feedbackDateTime"].toString()) : <any>undefined;
            this.feedbackUserDisplayName = _data["feedbackUserDisplayName"];
            this.feedbackPhoneNumber = _data["feedbackPhoneNumber"];
            this.feedbackOpinion = _data["feedbackOpinion"];
            this.feedbaclMode = _data["feedbaclMode"];
            this.needFeedbackType = _data["needFeedbackType"];
        }
    }

    static fromJS(data: any): Inbox {
        data = typeof data === 'object' ? data : {};
        let result = new Inbox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["businessKey"] = this.businessKey;
        data["businessType"] = this.businessType;
        data["title"] = this.title;
        data["referenceNumber"] = this.referenceNumber;
        data["fromUnitLongId"] = this.fromUnitLongId;
        data["fromUnitShortId"] = this.fromUnitShortId;
        data["fromUnitName"] = this.fromUnitName;
        data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>undefined;
        data["maxEndDateTime"] = this.maxEndDateTime ? this.maxEndDateTime.toISOString() : <any>undefined;
        data["emergencyLevel"] = this.emergencyLevel;
        data["archType"] = this.archType;
        data["leaderDisplayName"] = this.leaderDisplayName;
        data["assigneeDateTime"] = this.assigneeDateTime ? this.assigneeDateTime.toISOString() : <any>undefined;
        data["assigneePerson"] = this.assigneePerson;
        data["assigneeDepartment"] = this.assigneeDepartment;
        data["assigneePhoneNumber"] = this.assigneePhoneNumber;
        data["withdrawalDateTime"] = this.withdrawalDateTime ? this.withdrawalDateTime.toISOString() : <any>undefined;
        data["withdrawalPerson"] = this.withdrawalPerson;
        data["withdrawalPhoneNumber"] = this.withdrawalPhoneNumber;
        data["withdrawalOpinion"] = this.withdrawalOpinion;
        data["cancelDateTime"] = this.cancelDateTime ? this.cancelDateTime.toISOString() : <any>undefined;
        data["cancelPerson"] = this.cancelPerson;
        data["cancelPhoneNumber"] = this.cancelPhoneNumber;
        data["cancelOpinion"] = this.cancelOpinion;
        data["feedbackDateTime"] = this.feedbackDateTime ? this.feedbackDateTime.toISOString() : <any>undefined;
        data["feedbackUserDisplayName"] = this.feedbackUserDisplayName;
        data["feedbackPhoneNumber"] = this.feedbackPhoneNumber;
        data["feedbackOpinion"] = this.feedbackOpinion;
        data["feedbaclMode"] = this.feedbaclMode;
        data["needFeedbackType"] = this.needFeedbackType;
        return data; 
    }
}

export interface IInbox {
    id?: string | undefined;
    businessKey?: string | undefined;
    businessType?: string | undefined;
    title?: string | undefined;
    referenceNumber?: string | undefined;
    fromUnitLongId?: string | undefined;
    fromUnitShortId?: string | undefined;
    fromUnitName?: string | undefined;
    createDateTime?: Date | undefined;
    maxEndDateTime?: Date | undefined;
    emergencyLevel?: string | undefined;
    archType?: string | undefined;
    leaderDisplayName?: string | undefined;
    assigneeDateTime?: Date | undefined;
    assigneePerson?: string | undefined;
    assigneeDepartment?: string | undefined;
    assigneePhoneNumber?: string | undefined;
    withdrawalDateTime?: Date | undefined;
    withdrawalPerson?: string | undefined;
    withdrawalPhoneNumber?: string | undefined;
    withdrawalOpinion?: string | undefined;
    cancelDateTime?: Date | undefined;
    cancelPerson?: string | undefined;
    cancelPhoneNumber?: string | undefined;
    cancelOpinion?: string | undefined;
    feedbackDateTime?: Date | undefined;
    feedbackUserDisplayName?: string | undefined;
    feedbackPhoneNumber?: string | undefined;
    feedbackOpinion?: string | undefined;
    feedbaclMode?: string | undefined;
    needFeedbackType?: string | undefined;
}

export class InboxViewModel extends Inbox implements IInboxViewModel {
    maxEndDateTimeFormat?: string | undefined;
    createDateTimeFormat?: string | undefined;

    constructor(data?: IInboxViewModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.maxEndDateTimeFormat = _data["maxEndDateTimeFormat"];
            this.createDateTimeFormat = _data["createDateTimeFormat"];
        }
    }

    static fromJS(data: any): InboxViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InboxViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxEndDateTimeFormat"] = this.maxEndDateTimeFormat;
        data["createDateTimeFormat"] = this.createDateTimeFormat;
        super.toJSON(data);
        return data; 
    }
}

export interface IInboxViewModel extends IInbox {
    maxEndDateTimeFormat?: string | undefined;
    createDateTimeFormat?: string | undefined;
}

export class InboxDetailViewModel implements IInboxDetailViewModel {
    inbox?: InboxViewModel | undefined;
    files?: ListValueOfBoxFileViewModel | undefined;

    constructor(data?: IInboxDetailViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.inbox = _data["inbox"] ? InboxViewModel.fromJS(_data["inbox"]) : <any>undefined;
            this.files = _data["files"] ? ListValueOfBoxFileViewModel.fromJS(_data["files"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InboxDetailViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InboxDetailViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inbox"] = this.inbox ? this.inbox.toJSON() : <any>undefined;
        data["files"] = this.files ? this.files.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInboxDetailViewModel {
    inbox?: InboxViewModel | undefined;
    files?: ListValueOfBoxFileViewModel | undefined;
}

export class ListValueOfBoxFileViewModel implements IListValueOfBoxFileViewModel {
    value?: BoxFileViewModel[] | undefined;

    constructor(data?: IListValueOfBoxFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(BoxFileViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListValueOfBoxFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ListValueOfBoxFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListValueOfBoxFileViewModel {
    value?: BoxFileViewModel[] | undefined;
}

export class BoxFileViewModel implements IBoxFileViewModel {
    id?: string | undefined;
    name?: string | undefined;
    downloadUrl?: string | undefined;

    constructor(data?: IBoxFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.downloadUrl = _data["downloadUrl"];
        }
    }

    static fromJS(data: any): BoxFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new BoxFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["downloadUrl"] = this.downloadUrl;
        return data; 
    }
}

export interface IBoxFileViewModel {
    id?: string | undefined;
    name?: string | undefined;
    downloadUrl?: string | undefined;
}

export class InboxAssigneeViewModel implements IInboxAssigneeViewModel {
    id?: string | undefined;
    assigneeUserName?: string | undefined;
    assigneeDisplayName?: string | undefined;
    assigneeDepartment?: string | undefined;
    assigneePhoneNumber?: string | undefined;

    constructor(data?: IInboxAssigneeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assigneeUserName = _data["assigneeUserName"];
            this.assigneeDisplayName = _data["assigneeDisplayName"];
            this.assigneeDepartment = _data["assigneeDepartment"];
            this.assigneePhoneNumber = _data["assigneePhoneNumber"];
        }
    }

    static fromJS(data: any): InboxAssigneeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InboxAssigneeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assigneeUserName"] = this.assigneeUserName;
        data["assigneeDisplayName"] = this.assigneeDisplayName;
        data["assigneeDepartment"] = this.assigneeDepartment;
        data["assigneePhoneNumber"] = this.assigneePhoneNumber;
        return data; 
    }
}

export interface IInboxAssigneeViewModel {
    id?: string | undefined;
    assigneeUserName?: string | undefined;
    assigneeDisplayName?: string | undefined;
    assigneeDepartment?: string | undefined;
    assigneePhoneNumber?: string | undefined;
}

export class FeedbackViewModel implements IFeedbackViewModel {
    externalSystemBusinessKey?: string | undefined;
    userDisplayName?: string | undefined;
    phoneNumber?: string | undefined;
    reason?: string | undefined;
    remark?: string | undefined;
    makeCLQKMode?: MakeCLQKMode;

    constructor(data?: IFeedbackViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.externalSystemBusinessKey = _data["externalSystemBusinessKey"];
            this.userDisplayName = _data["userDisplayName"];
            this.phoneNumber = _data["phoneNumber"];
            this.reason = _data["reason"];
            this.remark = _data["remark"];
            this.makeCLQKMode = _data["makeCLQKMode"];
        }
    }

    static fromJS(data: any): FeedbackViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["externalSystemBusinessKey"] = this.externalSystemBusinessKey;
        data["userDisplayName"] = this.userDisplayName;
        data["phoneNumber"] = this.phoneNumber;
        data["reason"] = this.reason;
        data["remark"] = this.remark;
        data["makeCLQKMode"] = this.makeCLQKMode;
        return data; 
    }
}

export interface IFeedbackViewModel {
    externalSystemBusinessKey?: string | undefined;
    userDisplayName?: string | undefined;
    phoneNumber?: string | undefined;
    reason?: string | undefined;
    remark?: string | undefined;
    makeCLQKMode?: MakeCLQKMode;
}

export enum MakeCLQKMode {
    Completed = 1,
    NoDeal = 2,
    ToRead = 3,
}

export class ReceivingUnit implements IReceivingUnit {
    name?: string | undefined;
    longId?: string | undefined;
    shortId?: string | undefined;

    constructor(data?: IReceivingUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.longId = _data["longId"];
            this.shortId = _data["shortId"];
        }
    }

    static fromJS(data: any): ReceivingUnit {
        data = typeof data === 'object' ? data : {};
        let result = new ReceivingUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["longId"] = this.longId;
        data["shortId"] = this.shortId;
        return data; 
    }
}

export interface IReceivingUnit {
    name?: string | undefined;
    longId?: string | undefined;
    shortId?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}